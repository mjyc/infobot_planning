#! /usr/bin/env python

PACKAGE = 'infobot_topo_mapping'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("visualization_level",   int_t,    1, "Internal visualization level.", 0)
gen.add("min_obstacle_dist",     double_t, 2, "Minimum distance to obstacles.", 0.5)
gen.add("optimal_view_dist",     double_t, 2, "Distance from obstacle to optimal view position.", 1.0)
gen.add("min_voronoi_dist",      double_t, 2, "Min distance between obstacle and Voronoi graph.", 0.25)
gen.add("obstacle_cost_scaling", double_t, 2, "Obstacle cost scaling factor.", 5.0)
gen.add("view_cost_scaling",     double_t, 2, "Optimal view cost scaling factor.", 5.0)
gen.add("center_cost_scaling",   double_t, 2, "Center cost scaling factor.", 2.0)
gen.add("obstacle_cost_weight",  double_t, 2, "Obstacle cost scaling factor.", 1.0)
gen.add("view_cost_weight",      double_t, 2, "View cost scaling factor.", 1.0)
gen.add("center_cost_weight",    double_t, 2, "Center cost scaling factor.", 1.0)
gen.add("gibbs_max_iter",        int_t,    3, "Total number of MCMC iterations to perform, including burn-in.", 1000000)
gen.add("gibbs_burnin",          int_t,    3, "Number of MCMC iterations to discard as burn-in.", 1000)

exit(gen.generate(PACKAGE, "topo_mapping", "InfoBotTopoMapping"))
