#!/usr/bin/python

import rospy

import sys

import actionlib
from infobot_find_viewpoint_msgs.msg import *
from infobot_find_viewpoint_msgs.srv import *

DEFAULT_PMAP_TO_OCTOMAP_MODE = FindViewpointGoal.SURFACE
DEFAULT_OCTOMAP_FILENAME = "sim-simple-model.bt"
DEFAULT_TOPOMAP_FILENAME = "sim-simple-topo.yaml"

if __name__ == "__main__":
    rospy.init_node("find_viewpoint_send_multiple_goal")

    # Reads node ROS parameters.
    try:
        pmap_filenames = rospy.get_param('~pmap_filenames')
    except KeyError as e:
        rospy.logfatal(rospy.get_name() + ": Missing parameter: " + str(e))
        sys.exit(-1)
    pmap_to_octomap_mode = rospy.get_param("~pmap_to_octomap_mode", DEFAULT_PMAP_TO_OCTOMAP_MODE)
    octomap_filename = rospy.get_param("~octomap_filename", DEFAULT_OCTOMAP_FILENAME)
    topomap_filename = rospy.get_param("~topomap_filename", DEFAULT_TOPOMAP_FILENAME)

    # Send goals one by one.
    for pmap_filename in pmap_filenames:
        action_client = actionlib.SimpleActionClient("find_viewpoint", FindViewpointAction)
        action_client.wait_for_server()
        goal = FindViewpointGoal()
        goal.img_filename = pmap_filename + ".jpg"  # fix this line based on your need
        goal.pmap_to_octomap_mode = pmap_to_octomap_mode
        goal.pmap_filename = pmap_filename
        goal.pmap_frame_id = ""
        goal.octomap_filename = octomap_filename
        goal.octomap_frame_id = ""
        goal.topomap_filename = topomap_filename
        goal.topomap_frame_id = ""

        rospy.loginfo("Sending Goal:\n" + str(goal))
        action_client.send_goal(goal)
        action_client.wait_for_result()

        rospy.loginfo("Finished. Goal State:" + str(action_client.get_state()))
