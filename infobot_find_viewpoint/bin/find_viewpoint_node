#!/usr/bin/env python

import rospy

import numpy as np
import actionlib
from dynamic_reconfigure.server import Server
from geometry_msgs.msg import Pose
from move_base_msgs.msg import *
from visualization_msgs.msg import *
from tf.transformations import quaternion_from_euler
from infobot_find_viewpoint.cfg import InfoBotFindViewpointConfig
from infobot_find_viewpoint_msgs.msg import *
from infobot_find_viewpoint_msgs.srv import *
from infobot_map_msgs.srv import *
from infobot_topo_msgs.srv import *
from infobot_image_server.srv import *


def call_srv(srv_name, srv_type, srv_args):
    rospy.wait_for_service(srv_name)
    try:
        srv_proxy = rospy.ServiceProxy(srv_name, srv_type)
        return srv_proxy(*srv_args)
    except rospy.ServiceException, e:
        rospy.logerr("Service call failed: %s" % e)
        return None


def publish_pmap_octomap(pmap_filename, octomap_fiilename):
    rospy.logwarn("IGNORES INPUT pmap_frame_id. Uses \"map\" instead.")
    publish_pmap_resp = call_srv("publish_pmap", PublishProbabilityMap, (pmap_filename, ""))
    if not publish_pmap_resp or not publish_pmap_resp.success:
        return False
    rospy.logwarn("IGNORES INPUT octomap_frame_id. Uses \"map\" instead.")
    publish_octomap_resp = call_srv("publish_octomap", PublishOctomap, (octomap_fiilename, ""))
    if not publish_octomap_resp or not publish_octomap_resp.success:
        return False
    return True


def publish_pmap_octomap_topomap(pmap_filename, octomap_fiilename, topomap_filename):
    publish_pmap_octomap(pmap_filename, octomap_fiilename)
    rospy.logwarn("IGNORES INPUT topomap_frame_id. Uses \"map\" instead.")
    publish_topomap_resp = call_srv("publish_topomap", PublishTopologicalMap, (topomap_filename, ""))
    if not publish_topomap_resp or not publish_topomap_resp.success:
        return False
    return True


def call_compute_vis_value_srv(pose, mode):
    resp = call_srv("compute_vis_value", ComputeVisibilityValue, (
        pose,
        mode,
        "",  # use published pmap_filename
        "",  # use published pmap_frame
        "",  # use published octomap_filename
        ""   # use published octomap_frame
    ))
    return resp


def get_poses_from_topomap(topomap_fiilename, z):
    get_topomap_resp = call_srv("get_topomap", GetTopologicalMap, (topomap_fiilename, ""))
    if not get_topomap_resp:
        return []

    poses = []
    for place in get_topomap_resp.topomap.places:
        for view in place.views:
            pose = Pose()
            pose.position.x = view.pose.x
            pose.position.y = view.pose.y
            pose.position.z = z
            q = quaternion_from_euler(0, 0, view.pose.theta)
            pose.orientation.x = q[0]
            pose.orientation.y = q[1]
            pose.orientation.z = q[2]
            pose.orientation.w = q[3]
            poses.append(pose)

    return poses


def apply_pmap_bbx_filter(poses, pmap_filename, margin):
    '''
        margin: in meters
    '''
    get_pmap_resp = call_srv("get_pmap", GetProbabilityMap, (pmap_filename, ""))
    if not get_pmap_resp:
        return None

    minX = get_pmap_resp.pmap.info.origin.position.x - margin
    maxX = get_pmap_resp.pmap.info.origin.position.x + \
        (get_pmap_resp.pmap.info.width * get_pmap_resp.pmap.info.resolution) + margin
    minY = get_pmap_resp.pmap.info.origin.position.y - margin
    maxY = get_pmap_resp.pmap.info.origin.position.y + \
        (get_pmap_resp.pmap.info.height * get_pmap_resp.pmap.info.resolution) + margin

    new_poses = []
    for pose in poses:
        if pose.position.x > minX and pose.position.x < maxX and pose.position.y > minY and pose.position.y < maxY:
            new_poses.append(pose)

    return new_poses


def call_compute_vis_values_srv(poses, mode):
    resp = call_srv("compute_vis_values", ComputeVisibilityValues, (
        poses,
        mode,
        "",  # use published pmap_filename
        "",  # use published pmap_frame
        "",  # use published octomap_filename
        ""   # use published octomap_frame
    ))
    return resp


class FindViewpointNode(object):

    DEFAULT_FRAME_ID = "map"

    def __init__(self, name):
        self._action_name = name

        # calls self._reconfigure_callback!
        self._config_server = Server(InfoBotFindViewpointConfig, self._reconfigure_callback)

        self._move_base_ac = actionlib.SimpleActionClient("move_base", MoveBaseAction)

        self._pub_vis_values = rospy.Publisher("/vis_values_markers", MarkerArray, queue_size=10, latch=True)
        self._pub_max_vis_value = rospy.Publisher("/max_vis_values_marker", Marker, queue_size=10, latch=True)
        self._as = actionlib.SimpleActionServer(
            self._action_name, FindViewpointAction, execute_cb=self.execute_cb, auto_start=False)
        self._as.start()

        rospy.spin()  # for config server

    def _reconfigure_callback(self, config, level):
        rospy.loginfo("Setting parameters:")
        rospy.loginfo("-> camera_trans_z: %f" % config.camera_trans_z)
        rospy.loginfo("-> rect_filter_margin: %f" % config.rect_filter_margin)
        rospy.loginfo("-> max_iter: %d" % config.max_iter)
        rospy.loginfo("-> max_move_base_iter: %d" % config.max_move_base_iter)
        rospy.loginfo("-> move_base_filter_margin: %d" % config.move_base_filter_margin)
        self._camera_trans_z = config.camera_trans_z
        self._rect_filter_margin = config.rect_filter_margin
        self._max_iter = config.max_iter
        self._max_move_base_iter = config.max_move_base_iter
        self._move_base_filter_margin = config.move_base_filter_margin
        return config

    def _create_unreachable_vis_val_markers(self, frame_id, poses, vis_values, indices):
        marray = MarkerArray()
        max_vis_val = max(vis_values)
        for i in indices:
            marker = Marker()
            marker.header.frame_id = frame_id
            marker.header.stamp = rospy.Time.now()
            marker.ns = "vis_values"
            marker.id = i
            marker.type = Marker.ARROW
            marker.action = Marker.ADD
            marker.pose = poses[i]
            marker.scale.x = 0.5
            marker.scale.y = 0.05
            marker.scale.z = 0.05
            marker.color.r = 1.0 * vis_values[i] / max_vis_val
            marker.color.g = 1.0 * vis_values[i] / max_vis_val
            marker.color.b = 1.0 * vis_values[i] / max_vis_val
            marker.color.a = 0.8
            marker.lifetime = rospy.Duration()
            marray.markers.append(marker)
        return marray

    def _create_max_vis_val_marker(self, frame_id, pose):
        marker = Marker()
        marker.header.frame_id = frame_id
        marker.header.stamp = rospy.Time.now()
        marker.ns = "max_vis_value"
        marker.id = 0
        marker.type = Marker.ARROW
        marker.action = Marker.ADD
        marker.pose = pose
        marker.scale.x = 0.5
        marker.scale.y = 0.2
        marker.scale.z = 0.2
        marker.color.r = 1.0
        marker.color.g = 0.0
        marker.color.b = 0.0
        marker.color.a = 1.0
        marker.lifetime = rospy.Duration()
        return marker

    def _try_move_base(self, max_pose, poses, vis_values):
        # self._move_base_filter_margin
        for i in range(self._max_move_base_iter):
            rospy.loginfo("%s: try_move_base iter=%d." % (self._action_name, i))

            rospy.logdebug("%s: Waiting for /move_base action server." % self._action_name)
            self._move_base_ac.wait_for_server()
            rospy.logdebug("%s: Waiting for /move_base action DONE!" % self._action_name)
            goal = MoveBaseGoal()
            goal.target_pose.header.stamp = rospy.get_rostime()
            goal.target_pose.header.frame_id = self.DEFAULT_FRAME_ID
            goal.target_pose.pose.position.x = max_pose.position.x
            goal.target_pose.pose.position.y = max_pose.position.y
            goal.target_pose.pose.position.z = 0.0
            goal.target_pose.pose.orientation = max_pose.orientation
            self._move_base_ac.send_goal(goal)
            rospy.logdebug("%s: Waiting for /move_base result." % self._action_name)
            self._move_base_ac.wait_for_result()
            rospy.logdebug("%s: Waiting for /move_base result DONE!" % self._action_name)

            indices_to_be_removed = []
            if self._move_base_ac.get_state() != 3:  # not success
                rospy.loginfo("%s: /move_base action did not succeed." % self._action_name)
                idx = 0
                for pose in poses:
                    dist = np.sqrt(np.power(pose.position.x - max_pose.position.x, 2) +
                                   np.power(pose.position.y - max_pose.position.y, 2))
                    if (dist < self._move_base_filter_margin):
                        indices_to_be_removed.append(idx)
                    idx += 1
                self._pub_vis_values.publish(self._create_unreachable_vis_val_markers(
                    self.DEFAULT_FRAME_ID, poses, vis_values, indices_to_be_removed))
                poses = [i for j, i in enumerate(poses) if j not in indices_to_be_removed]
                vis_values = [i for j, i in enumerate(vis_values) if j not in indices_to_be_removed]
                if sum(vis_values) == 0:
                    rospy.loginfo("%s: vis_values are all zero after removing unreachable poses." % self._action_name)
                    return []
                next_max_vis_val_exp = max(vis_values)
                rospy.loginfo("%s: Next max vis_value expected = %f" % (self._action_name, next_max_vis_val_exp))
                # check if they are all zeros.
                next_max_vis_val_exp_index = [
                    i for i, j in enumerate(vis_values) if j == next_max_vis_val_exp][0]
                new_max_pose_exp = poses[next_max_vis_val_exp_index]
                max_pose = new_max_pose_exp
                self._pub_max_vis_value.publish(self._create_max_vis_val_marker(self.DEFAULT_FRAME_ID, max_pose))
            else:
                break

        # Handle navigation failure case
        return (max_pose, poses, vis_values)

    def execute_cb(self, goal):

        feedback = FindViewpointFeedback()
        result = FindViewpointResult()
        result.img_saved = False

        abort = False
        preempt = False

        poses = []
        vis_values = []

        # Get poses
        # publish maps
        if not publish_pmap_octomap_topomap(goal.pmap_filename, goal.octomap_filename, goal.topomap_filename):
            rospy.logerr("%s: Error while publishing maps." % self._action_name)
            abort = True
        # process maps
        poses = get_poses_from_topomap(goal.topomap_filename, self._camera_trans_z)
        poses = apply_pmap_bbx_filter(poses, goal.pmap_filename, self._rect_filter_margin)
        if poses == []:
            rospy.logerr("%s: Error while extracting poses." % self._action_name)
            abort = True

        max_iter = self._max_iter
        cur_iter = 0
        max_pose = None
        max_vis_val_obs = -1

        while cur_iter < self._max_iter and not abort and not preempt:
            rospy.loginfo("%s: iter=%d" % (self._action_name, cur_iter))

            if self._as.is_preempt_requested():
                rospy.loginfo("%s: Preempted" % self._action_name)
                preempt = True
                break

            if max_pose is not None and len(poses) != 0 and len(vis_values) != 0:
                rospy.loginfo("%s: Navigating to max_pose:\n%s." % (self._action_name, max_pose))
                (max_pose, poses, vis_values) = self._try_move_base(max_pose, poses, vis_values)
                if len(poses) == 0:
                    abort = True

            compute_vis_val_resp = call_compute_vis_value_srv(max_pose, goal.pmap_to_octomap_mode)
            if not compute_vis_val_resp:
                abort = True
                break
            vis_val_obs = compute_vis_val_resp.vis_value
            rospy.loginfo("%s: Current vis_value observed = %f" % (self._action_name, vis_val_obs))

            # NOTE: cur_iter==1 case is when the robot is at first goal.
            # NOTE: as a side-effect, the program always saves an image from its first position.
            if vis_val_obs > max_vis_val_obs or cur_iter == 1:
                if goal.img_filename == "":
                    goal.img_filename = "find_viewpoint.jpg"
                save_image_resp = call_srv("save_image", SaveImage, [goal.img_filename])
                if not save_image_resp:
                    rospy.loginfo("%s: New image saved." % self._action_name)
                    abort = True
                    break
                else:
                    result.img_saved = True
                max_vis_val_obs = vis_val_obs
            else:
                rospy.loginfo("%s: New pose does not provide a better vis_value observed." % self._action_name)
                result.img_saved = False

            compute_vis_vals_resp = call_compute_vis_values_srv(poses, goal.pmap_to_octomap_mode)
            if not compute_vis_vals_resp:
                abort = True
                break
            if sum(compute_vis_vals_resp.vis_values) == 0:
                rospy.loginfo("%s: vis_values are all zero." % self._action_name)
                abort = True
                break

            max_vis_val_exp = max(compute_vis_vals_resp.vis_values)
            rospy.loginfo("%s: New max vis_value expected = %f" % (self._action_name, max_vis_val_exp))
            max_vis_val_exp_index = [
                i for i, j in enumerate(compute_vis_vals_resp.vis_values) if j == max_vis_val_exp][0]
            new_max_pose = poses[max_vis_val_exp_index]
            call_compute_vis_value_srv(new_max_pose, goal.pmap_to_octomap_mode)  # for debugging

            if new_max_pose == max_pose:
                rospy.loginfo("%s: Success!" % self._action_name)
                break
            else:
                max_pose = new_max_pose
                vis_values = list(compute_vis_vals_resp.vis_values)
                # publish feedback
                feedback.poses = poses
                feedback.vis_values = compute_vis_vals_resp.vis_values
                self._as.publish_feedback(feedback)

            cur_iter += 1

        # loop reached max_iter
        if cur_iter == max_iter and not abort:
            rospy.loginfo("%s: max_iter reached." % self._action_name)
            abort = True

        if preempt:
            self._as.set_preempted(result)
        elif abort:
            self._as.set_aborted(result)
        else:
            self._as.set_succeeded(result)

        rospy.loginfo("%s: Results:" % self._action_name)
        rospy.loginfo("%s:   total iter=%d" % (self._action_name, cur_iter))
        rospy.loginfo("%s:   success=%r" % (self._action_name, (not abort) and (not preempt)))

if __name__ == "__main__":
    rospy.init_node("find_viewpoint")
    FindViewpointNode(rospy.get_name())
    rospy.spin()
