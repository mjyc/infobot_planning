#!/usr/bin/env python


# ######################################################################
# Imports
# ######################################################################

import rospy

# System-builtins
import glob
import numpy as np
import os
import re
import yaml
from PIL import Image, ImageDraw

# ROS
import tf

# INFOBOT
from infobot_mapping_msgs.msg import *
from infobot_pmap_store.srv import *


# ######################################################################
# Functions
# ######################################################################

# Copied from:
# http://stackoverflow.com/questions/7368739/numpy-and-16-bit-pgm
def read_pgm(filename, byteorder=">"):
    '''Return image data from a raw PGM file as numpy array.

    Format specification: http://netpbm.sourceforge.net/doc/pgm.html

    '''
    error_return_val = None

    with open(filename, "rb") as f:
        buffer = f.read()
    try:
        header, width, height, maxval = re.search(
            b"(^P5\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n]\s)*)", buffer).groups()
    except AttributeError:
        rospy.logerr("Not a raw PGM file: \"%s\"" % filename)
        return error_return_val
    return np.frombuffer(buffer,
                         dtype="u1" if int(maxval) < 256 else byteorder + "u2",
                         count=int(width) * int(height),
                         offset=len(header)
                         ).reshape((int(height), int(width)))


def parse_pmap_region_yaml_data(yaml_data):
    error_return_val = None

    resolution = 0.0
    origin = [0.0, 0.0, 0.0]
    img_fname = ""
    try:
        resolution = yaml_data["resolution"]
    except KeyError as e:
        rospy.logerr("Invalid yaml file format: %s field not found" % str(e))
        return error_return_val
    try:
        origin[0] = yaml_data["origin"][0]
        origin[1] = yaml_data["origin"][1]
        origin[2] = yaml_data["origin"][2]
    except KeyError as e:
        rospy.logerr("Invalid yaml file format: %s field not found" % str(e))
        return error_return_val
    try:
        img_fname = yaml_data["image"]
    except KeyError as e:
        rospy.logerr("Invalid yaml file format: %s field not found" % str(e))
        return error_return_val

    return {"resolution": resolution, "origin": origin, "img_fname": img_fname}


def parse_pmap_dimension_yaml_data(yaml_data):
    error_return_val = None

    coordinates = [[]]
    try:
        coordinates = yaml_data["coordinates"]
    except KeyError as e:
        rospy.logerr("Invalid yaml file format: %s field not found" % str(e))
        return error_return_val

    return {"coordinates": coordinates}


def create_pmap_from_imgfile(fname, res, origin):
    error_return_val = None

    pgrid = ProbabilityGrid()

    img = read_pgm(fname)
    if img is None:
        rospy.logerr("Error while reading file: \"%s\"" % fname)
        return error_return_val

    if len(origin) != 3:
        rospy.logerr("Invalid origin input: %s" % origin)
        return error_return_val

    pgrid.info.width = img.shape[1]
    pgrid.info.height = img.shape[0]
    pgrid.info.resolution = res
    pgrid.info.origin.position.x = origin[0]
    pgrid.info.origin.position.y = origin[1]
    pgrid.info.origin.position.z = 0.0

    q = tf.transformations.quaternion_from_euler(0.0, 0.0, origin[2])
    pgrid.info.origin.orientation.x = q[0]
    pgrid.info.origin.orientation.y = q[1]
    pgrid.info.origin.orientation.z = q[2]
    pgrid.info.origin.orientation.w = q[3]

    pgrid.data = np.flipud(img).flatten() / 255.0

    return pgrid


def create_pmap_from_coords(coords, res):
    ''' Create ProbabilityGrid msg from "dimension" type YAML file.
        "resolution" field is needed because this function is compiling
        dimension type data to img-like format.
    '''

    error_return_val = None

    coords = np.array(coords)
    if coords.shape[1] != 2:
        rospy.logerr("Invalid input coordinates:\n %s" % str(coords))
        return error_return_val
    coords /= res
    coords = coords.astype(int)  # truncating float to int
    # print coords
    min_coords = np.min(coords, axis=0)
    max_coords = np.max(coords, axis=0)
    coords[:, 0] -= min_coords[0]
    coords[:, 1] -= min_coords[1]

    pgrid = ProbabilityGrid()

    pgrid.info.width = max_coords[0] - min_coords[0]
    pgrid.info.height = max_coords[1] - min_coords[1]
    pgrid.info.resolution = res
    pgrid.info.origin.position.x = min_coords[0] * res
    pgrid.info.origin.position.y = min_coords[1] * res
    pgrid.info.origin.position.z = 0.0
    # print pgrid.info

    q = tf.transformations.quaternion_from_euler(0.0, 0.0, 0.0)
    pgrid.info.origin.orientation.x = q[0]
    pgrid.info.origin.orientation.y = q[1]
    pgrid.info.origin.orientation.z = q[2]
    pgrid.info.origin.orientation.w = q[3]

    img = Image.new("L", (pgrid.info.width, pgrid.info.height), 0)
    ImageDraw.Draw(img).polygon(coords.ravel().tolist(), outline=1, fill=1)
    pgrid.data = np.array(img).flatten()

    return pgrid


def combine_pmap_infos(pmaps):
    error_return_val = None

    if len(pmaps) == 0:
        rospy.logerr("Input \"pmaps\" must contain at least 1 element.")
        return error_return_val

    # extract info
    res = 0.0
    min_pixel_x = 0.0
    min_pixel_y = 0.0
    max_pixel_x = 0.0
    max_pixel_y = 0.0
    for i in range(len(pmaps)):
        pmap = pmaps[i]
        if i > 0 and res != pmap.info.resolution:
            rospy.logerr("Does not support multiple resolutions.")
            return error_return_val
        q = pmap.info.origin.orientation
        if tf.transformations.euler_from_quaternion([q.x, q.y, q.z, q.w])[2] != 0.0:
            rospy.logerr("Does not support non-zero origin[2] (i.e. rotation).")
            return error_return_val
        res = pmap.info.resolution
        cur_min_pixel_x = int(np.round(pmap.info.origin.position.x / res))
        cur_min_pixel_y = int(np.round(pmap.info.origin.position.y / res))
        cur_max_pixel_x = cur_min_pixel_x + pmap.info.width
        cur_max_pixel_y = cur_min_pixel_y + pmap.info.height
        min_pixel_x = cur_min_pixel_x if cur_min_pixel_x < min_pixel_x else min_pixel_x
        min_pixel_y = cur_min_pixel_y if cur_min_pixel_y < min_pixel_y else min_pixel_y
        max_pixel_x = cur_max_pixel_x if cur_max_pixel_x > max_pixel_x else max_pixel_x
        max_pixel_y = cur_max_pixel_y if cur_max_pixel_y > max_pixel_y else max_pixel_y
        # print min_pixel_x, min_pixel_y, max_pixel_x, max_pixel_y

    # combine pmap infos
    pmap_out = ProbabilityGrid()
    pmap_out.info.width = max_pixel_x - min_pixel_x
    pmap_out.info.height = max_pixel_y - min_pixel_y
    pmap_out.info.resolution = res
    pmap_out.info.origin.position.x = min_pixel_x * res
    pmap_out.info.origin.position.y = min_pixel_y * res
    pmap_out.info.origin.position.z = 0.0

    q = tf.transformations.quaternion_from_euler(0.0, 0.0, 0.0)  # we do not allow any rotation
    pmap_out.info.origin.orientation.x = q[0]
    pmap_out.info.origin.orientation.y = q[1]
    pmap_out.info.origin.orientation.z = q[2]
    pmap_out.info.origin.orientation.w = q[3]

    return pmap_out


def add_disjoint_pmaps(pmap1, pmap2):
    error_return_val = None

    if pmap1.header.frame_id != pmap2.header.frame_id:
        rospy.logerr("pmap1 and pmap2 must have same frame_id.")
        return error_return_val

    pmap_out = combine_pmap_infos([pmap1, pmap2])
    if pmap_out is None:
        return error_return_val

    res = pmap_out.info.resolution
    pixel_x = int(pmap_out.info.origin.position.x / res)
    pixel_y = int(pmap_out.info.origin.position.y / res)

    data1 = np.zeros((pmap_out.info.height, pmap_out.info.width))
    pmap1_origin_x = int(np.round(pmap1.info.origin.position.x / res)) - pixel_x
    pmap1_origin_y = int(np.round(pmap1.info.origin.position.y / res)) - pixel_y
    pmap1_data = np.array(pmap1.data).reshape((pmap1.info.height, pmap1.info.width))
    data1[pmap1_origin_y:(pmap1_origin_y + pmap1.info.height),
          pmap1_origin_x:(pmap1_origin_x + pmap1.info.width)] = pmap1_data
    data1 = data1.astype(bool)
    data1_cnt = data1.sum()

    data2 = np.zeros((pmap_out.info.height, pmap_out.info.width))
    pmap2_origin_x = int(np.round(pmap2.info.origin.position.x / res)) - pixel_x
    pmap2_origin_y = int(np.round(pmap2.info.origin.position.y / res)) - pixel_y
    pmap2_data = np.array(pmap2.data).reshape((pmap2.info.height, pmap2.info.width))
    data2[pmap2_origin_y:(pmap2_origin_y + pmap2.info.height),
          pmap2_origin_x:(pmap2_origin_x + pmap2.info.width)] = pmap2_data
    data2 = data2.astype(bool)
    data2_cnt = data2.sum()

    data_out = np.zeros((pmap_out.info.height, pmap_out.info.width), dtype=bool)
    np.logical_or(data1, data2, data_out)
    data_out_cnt = data_out.sum()
    data_out = data_out.astype(float)

    if data1_cnt + data2_cnt != data_out_cnt:
        rospy.logerr("Not input pmaps are not disjoint.")
        return error_return_val

    data_out[pmap1_origin_y:(pmap1_origin_y + pmap1.info.height),
             pmap1_origin_x:(pmap1_origin_x + pmap1.info.width)] = pmap1_data
    data_out[pmap2_origin_y:(pmap2_origin_y + pmap2.info.height),
             pmap2_origin_x:(pmap2_origin_x + pmap2.info.width)] = pmap2_data

    pmap_out.data = data_out.flatten()

    pmap_out.info.map_load_time = rospy.Time.now()
    pmap_out.header.frame_id = pmap1.header.frame_id
    pmap_out.header.stamp = rospy.Time.now()
    return pmap_out


def multiply_joint_pmaps(pmap1, pmap2):
    error_return_val = None

    pmap_out = combine_pmap_infos([pmap1, pmap2])
    if pmap_out is None:
        return error_return_val

    res = pmap_out.info.resolution
    pixel_x = int(pmap_out.info.origin.position.x / res)
    pixel_y = int(pmap_out.info.origin.position.y / res)

    data1 = np.zeros((pmap_out.info.height, pmap_out.info.width))
    pmap1_origin_x = int(np.round(pmap1.info.origin.position.x / res)) - pixel_x
    pmap1_origin_y = int(np.round(pmap1.info.origin.position.y / res)) - pixel_y
    pmap1_data = np.array(pmap1.data).reshape((pmap1.info.height, pmap1.info.width))
    data1[pmap1_origin_y:(pmap1_origin_y + pmap1.info.height),
          pmap1_origin_x:(pmap1_origin_x + pmap1.info.width)] = pmap1_data
    data1 = data1.astype(bool)

    data2 = np.zeros((pmap_out.info.height, pmap_out.info.width))
    pmap2_origin_x = int(np.round(pmap2.info.origin.position.x / res)) - pixel_x
    pmap2_origin_y = int(np.round(pmap2.info.origin.position.y / res)) - pixel_y
    pmap2_data = np.array(pmap2.data).reshape((pmap2.info.height, pmap2.info.width))
    data2[pmap2_origin_y:(pmap2_origin_y + pmap2.info.height),
          pmap2_origin_x:(pmap2_origin_x + pmap2.info.width)] = pmap2_data
    data2 = data2.astype(bool)

    data_out = np.zeros((pmap_out.info.height, pmap_out.info.width), dtype=bool)
    np.logical_and(data1, data2, data_out)
    data_out_cnt = data_out.sum()
    data_out = data_out.astype(float)

    if data_out_cnt == 0:
        rospy.logerr("No overlap between two input pmaps. Halting.")
        return error_return_val

    data_out[pmap1_origin_y:(pmap1_origin_y + pmap1.info.height),
             pmap1_origin_x:(pmap1_origin_x + pmap1.info.width)] *= pmap1_data
    data_out[pmap2_origin_y:(pmap2_origin_y + pmap2.info.height),
             pmap2_origin_x:(pmap2_origin_x + pmap2.info.width)] *= pmap2_data

    pmap_out.data = data_out.flatten()

    pmap_out.info.map_load_time = rospy.Time.now()
    pmap_out.header.frame_id = pmap1.header.frame_id
    pmap_out.header.stamp = rospy.Time.now()
    return pmap_out


# ######################################################################
# Main
# ######################################################################

class ProbabilityMapFilesServer():

    DEFAULT_MAPFILES_DIRPATH = os.getcwd()
    DEFAULT_FRAME_ID = "map"
    DEFAULT_TOPIC = "/pmap"
    DEFAULT_RESOLUTION = 0.05

    def __init__(self):
        rospy.init_node("pmap_files_server")

        self.pmap_files_dirpath = rospy.get_param(
            "~pmap_files_dirpath", self.DEFAULT_MAPFILES_DIRPATH)
        rospy.loginfo("Setting pmap_files_dirpath to: %s" %
                      self.pmap_files_dirpath)
        topic = rospy.get_param("~topic", self.DEFAULT_TOPIC)
        if topic is "":
            rospy.logwarn("Cannot use an empty string as a topic name. Using \"%s\" instead.", self.DEFAULT_TOPIC)
            topic = self.DEFAULT_TOPIC
        self.pub = rospy.Publisher(topic, ProbabilityGrid, queue_size=1, latch=True)
        self.last_pmap = None

        rospy.Service(
            "list_pmap_yaml_files", ListProbabilityMapFiles, self.handle_list_yaml_files)
        rospy.Service(
            "publish_pmap", PublishProbabilityMap, self.handle_publish_pmap)
        rospy.Service(
            "get_pmap", GetProbabilityMap, self.handle_get_pmap)

        rospy.Service(
            "add_disjoint_pmap", AddDisjointProbabilityMap, self.handle_add_disjoint_pmap)
        rospy.Service(
            "multiply_joint_pmap", MultiplyJointProbabilityMap, self.handle_multiply_joint_pmap)

        rospy.spin()

    def load_pmap_from_yaml_file(self, pmap_files_dirpath, filename, frame_id):
        error_return_val = None

        # Read YAML and turn into a dictionary
        yaml_data = None
        yaml_fname = os.path.abspath(os.path.join(pmap_files_dirpath, filename))
        try:
            with open(yaml_fname, "r") as f:
                # load all documents
                yaml_data = yaml.load(f)
                if yaml_data is None:
                    raise yaml.YAMLError("Empty files not allowed")
        except yaml.YAMLError as e:
            rospy.logerr("Invalid YAML file: %s with file=%s" % (str(e), yaml_fname))
            return error_return_val
        except:
            rospy.logerr("YAML file error: %s with file=%s" % (sys.exc_info()[0], yaml_fname))
            return error_return_val

        # Generate pmap based on "type"
        try:
            type = yaml_data["type"]
        except KeyError as e:
            rospy.logerr("Invalid yaml file format: %s field not found" % str(e))
            return error_return_val

        if type == "region":
            p = parse_pmap_region_yaml_data(yaml_data)
            img_fname = os.path.join(os.path.dirname(yaml_fname), p["img_fname"])
            pmap = create_pmap_from_imgfile(img_fname, p["resolution"], p["origin"])
        elif type == "dimension":
            p = parse_pmap_dimension_yaml_data(yaml_data)
            res = rospy.get_param("~frame_id", self.DEFAULT_RESOLUTION)
            pmap = create_pmap_from_coords(yaml_data["coordinates"], res)
        else:
            rospy.logerr("Unknown type: %s" % type)
            return error_return_val

        if pmap is None:
            return error_return_val
        pmap.info.map_load_time = rospy.Time.now()
        pmap.header.frame_id = frame_id
        pmap.header.stamp = rospy.Time.now()
        return pmap

    def handle_list_yaml_files(self, req):
        pmap_files = glob.glob(
            os.path.join(self.pmap_files_dirpath, "*.yaml"))
        pmap_files = [os.path.basename(map_file) for map_file in pmap_files]
        return ListProbabilityMapFilesResponse(pmap_files)

    def handle_publish_pmap(self, req):
        error_return_val = PublishProbabilityMapResponse(False)

        filename = req.filename
        if filename is "":
            rospy.logerr("filename field cannot be empty.")
            return error_return_val
        frame_id = req.frame_id
        if frame_id is "":
            rospy.logwarn("frame_id field cannot be empty. Setting it to \"map\".")
            frame_id = rospy.get_param("~frame_id", self.DEFAULT_FRAME_ID)

        msg = self.load_pmap_from_yaml_file(self.pmap_files_dirpath, filename, frame_id)
        if msg is None:
            return error_return_val

        self.pub.publish(msg)

        self.last_pmap = msg
        return PublishProbabilityMapResponse(True)

    def handle_get_pmap(self, req):
        error_return_val = None

        frame_id = req.frame_id
        if frame_id is "":
            rospy.logwarn("frame_id field cannot be empty. Setting it to \"map\".")
            frame_id = rospy.get_param("~frame_id", self.DEFAULT_FRAME_ID)

        filename = req.filename
        if filename is "" and self.last_pmap is None:
            rospy.logerr("no pmap is published previously. use /publish_pmap to publish a map before use /get_map with "
                         "an empty filename.")
            return error_return_val
        elif filename is "" and self.last_pmap is not None:
            rospy.logwarn("Overriding old frame_id with new frame_id \"%s\"." % frame_id)
            self.last_pmap.header.frame_id = frame_id
            self.last_pmap.header.stamp = rospy.Time.now()
            msg = self.last_pmap
        else:
            msg = self.load_pmap_from_yaml_file(self.pmap_files_dirpath, filename, frame_id)

        if msg is None:
            return error_return_val

        return GetProbabilityMapResponse(msg)

    def handle_add_disjoint_pmap(self, req):
        error_return_val = None
        filename = req.filename
        if filename is "":
            rospy.logerr("filename field cannot be empty.")
            return error_return_val
        if self.last_pmap is None:
            rospy.logerr("no pmap is published previously. use /publish_pmap to publish a map before use /get_map with "
                         "an empty filename.")
            return error_return_val

        pmap = self.load_pmap_from_yaml_file(self.pmap_files_dirpath, filename, self.last_pmap.header.frame_id)
        msg = add_disjoint_pmaps(self.last_pmap, pmap)
        if msg is None:
            return error_return_val
        self.pub.publish(msg)
        self.last_pmap = msg
        return AddDisjointProbabilityMapResponse(True)

    def handle_multiply_joint_pmap(self, req):
        error_return_val = None
        filename = req.filename
        if filename is "":
            rospy.logerr("filename field cannot be empty.")
            return error_return_val
        if self.last_pmap is None:
            rospy.logerr("no pmap is published previously. use /publish_pmap to publish a map before use /get_map with "
                         "an empty filename.")
            return error_return_val

        pmap = self.load_pmap_from_yaml_file(self.pmap_files_dirpath, filename, self.last_pmap.header.frame_id)
        msg = multiply_joint_pmaps(self.last_pmap, pmap)
        if msg is None:
            return error_return_val
        self.pub.publish(msg)
        self.last_pmap = msg
        return MultiplyJointProbabilityMapResponse(True)

# ######################################################################
# Main
# ######################################################################

if __name__ == "__main__":
    ProbabilityMapFilesServer()
